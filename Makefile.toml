# Copyright 2015-2019 Benjamin Fry <benjaminfry@me.com>
#
# Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
# http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
# http://opensource.org/licenses/MIT>, at your option. This file may not be
# copied, modified, or distributed except according to those terms.

# This is a Makefile for `cargo make`, to use it first install cargo-make with `cargo install cargo-make`

[config]
skip_core_tasks = true
init_task = "init"

[config.modify_core_tasks]
# if true, all core tasks are set to private (default false)
private = true


## Feature profiles
[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"

[tasks.install-openssl]
condition = { platforms = ["windows"] }
env = { OPENSSL_VERSION = "1_1_1d", OPENSSL_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}\\target\\OpenSSL" }
script_runner = "powershell"
script_extension = "ps1"
script = [
'''
Set-PSDebug -Trace 1
mkdir ${env:CARGO_MAKE_WORKING_DIRECTORY}\\target
mkdir ${env:CARGO_MAKE_WORKING_DIRECTORY}\\target\OpenSSL
Invoke-WebRequest -URI "http://slproweb.com/download/Win64OpenSSL-${env:OPENSSL_VERSION}.exe" -OutFile "${env:CARGO_MAKE_WORKING_DIRECTORY}\target\OpenSSL.exe"
Start-Process -FilePath "${env:CARGO_MAKE_WORKING_DIRECTORY}\target\OpenSSL.exe" -ArgumentList "/SILENT /VERYSILENT /SP- /DIR=${env:OPENSSL_DIR}"
Invoke-WebRequest "https://curl.haxx.se/ca/cacert.pem" -O "${env:OPENSSL_DIR}\cacert.pem"
'''
]

[tasks.init]
dependencies = ["install-openssl"]

[tasks.clean]
command = "cargo"
args = ["clean", "-p", "${CARGO_MAKE_CRATE_NAME}"]

[tasks.fmt]
command = "cargo"
args = ["fmt", "--", "--check"]

[tasks.check]
command = "cargo"
args = ["check", "--lib", "--examples", "--tests", "--bins", "@@remove-empty(FEATURES)"]

[tasks.build]
command = "cargo"
args = ["build", "--lib", "--bins",  "@@remove-empty(FEATURES)"]

[tasks.test]
command = "cargo"
args = ["test", "--lib", "--examples", "--tests", "--bins", "@@remove-empty(FEATURES)"]

[tasks.clippy]
dependencies = ["clean"]
command = "cargo"
args = ["clippy", "--lib", "--examples", "--tests", "--bins", "--all-features", "--", "-D", "warnings"]

[tasks.build-bench]
command = "cargo"
toolchain = "nightly"
args = ["bench", "--no-run"]

[tasks.all]
dependencies = ["check", "build", "test"]

[tasks.default]
dependencies = ["all"]

## defined tasks
[tasks.default-features]
workspace = false
env = { FEATURES = "" }
run_task = { name = "all", fork = true }

[tasks.no-default-features]
workspace = false
env = { FEATURES = "--no-default-features", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "tests/compatibility-tests" }
run_task = { name = "all", fork = true }

[tasks.all-features]
workspace = false
env = { FEATURES = "--all-features" }
run_task = { name = "all", fork = true }

[tasks.dns-over-openssl]
workspace = false
env = { FEATURES = "--features=dns-over-openssl", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dnssec-openssl]
workspace = false
env = { FEATURES = "--features=dnssec-openssl", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dnssec-ring]
workspace = false
env = { FEATURES = "--features=dnssec-ring", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dns-over-rustls]
workspace = false
env = { FEATURES = "--features=dns-over-rustls", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dns-over-https-rustls]
workspace = false
env = { FEATURES = "--features=dns-over-https-rustls", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/rustls;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dns-over-native-tls]
workspace = false
# TODO: seems like a gap in testing if there are no testst in client for native-tls
env = { FEATURES = "--features=dns-over-native-tls", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/openssl;crates/rustls;crates/https;crates/client;crates/server;bin;tests/compatibility-tests;tests/integration-tests;util" }
run_task = { name = "all", fork = true }

[tasks.mdns]
workspace = false
env = { FEATURES = "--features=mdns", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/native-tls;crates/openssl;crates/rustls;crates/https;crates/server;bin;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.world]
dependencies = ["no-default-features", "default-features", "all-features", "dns-over-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-dnssec-openssl", "dns-dnssec-openssl", "dns-dnssec-ring", "mdns"]